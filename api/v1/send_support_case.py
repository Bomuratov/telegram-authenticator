import logging
import base64
from fastapi import APIRouter, status, HTTPException
from aiogram.exceptions import TelegramBadRequest
from schemas.notifications import SupportModel
from bot.commands import bot

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()


async def support_case(data: SupportModel):
    caption = (
        f"üì© <b>–ù–æ–≤–æ–µ –û–±—Ä–∞—â–µ–Ω–∏–µ</b>\n"
        f"üë§ –ò–º—è: {data.name}\n"
        f"üìß Email: {data.email or '-'}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.phone}\n"
        f"üìù –¢–µ–º–∞: {data.subject}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.message}"
    )

    try:
        if data.attachment:
            try:
                photo_bytes = base64.b64decode(data.attachment)
            except Exception:
                raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç base64")

            await bot.send_photo(
                chat_id="-1002641409178",
                photo=photo_bytes,
                caption=caption,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(
                chat_id="-1002641409178",
                text=caption,
                parse_mode="HTML"
            )

        return {
            "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            "code": 2
        }

    except TelegramBadRequest as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))